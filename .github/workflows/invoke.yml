name: Invoke workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        options:
        - dev
        - qa
        - uat
        - prf
        - prd
      azure_region:
        type: choice
        description: 'Azure cloud region'
        required: true
        default: 'eastus'
        options:
        - eastus
        - westus3
      terraform_action:
        type: choice
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        options:
        - plan
        - apply
        # - destroy

env:
  deploy_environment: ${{ github.event.inputs.environment == '' && 'dev' || github.event.inputs.environment }}
  azure_region: ${{ github.event.inputs.azure_region == '' && 'eastus' || github.event.inputs.azure_region }}

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      chart_exists: ${{ steps.hello.outputs.chart_exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Hello World
        id: hello
        run: |
          date | tee -a ./date.txt | gzip --stdout > ./my_log.gz
          ls -la
          gunzip -c ./my_log.gz
          echo "------"
          cat ./date.txt
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'  
      
      - name: Convert HCL to JSON using Docker
        run: |
          ls -la ${{ github.workspace }}
          docker pull tmccombs/hcl2json
          docker run --rm -v ${{ github.workspace }}/file:/data tmccombs/hcl2json /data/input.tfvars > ${{ github.workspace }}/output.json

          # Create a JSON for app settings
          APP_SETTINGS_JSON=$(jq '.shared_resources_config.eastus.shared_function_plan_apps.function_app.app_settings | with_entries(select(.value == "false"))' output.json)

          # Set the app settings using the JSON file
          echo "Following settings will be configured for ..."
          echo "$APP_SETTINGS_JSON"

      - name: Display the JSON output
        run: cat ${{ github.workspace }}/output.json
          

  # build:
  #   if: ${{ needs.test.outputs.chart_exists == 'false' }}
  #   needs: [test]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 1
  #     matrix:
  #       sre-helm-chart: [sre-grafana, sre-kafka-monitor]
  #       # sre-helm-chart: [sre-grafana, sre-kafka-monitor, sre-otel-collector-agent, sre-otel-collector-gw]
  #       experimental: [false]
  #   steps:
  #     - name: Hello World
  #       run: echo "Hello Alex"

  #     - name: Check if env is right
  #       run: |
  #         if [ "${{ env.deploy_environment }}" = "prf" ]; then
  #           custom_environment="perf"
  #         elif [ "${{ env.deploy_environment }}" = "prd" ]; then
  #           custom_environment="prod"
  #         else 
  #           custom_environment=${{ env.deploy_environment }}
  #         fi
  #         payload="{\"envname\": \"$custom_environment\", \"azure_region\": \"${{ env.azure_region }}\", \"chart_name\": \"${{ matrix.sre-helm-chart }}\"}"
  #         echo $payload | jq .
  #         echo "JSON_PAYLOAD=$payload" >> $GITHUB_ENV
          
  #     - name: Invoke ${{ matrix.sre-helm-chart }} chart
  #       id: trigger-step
  #       continue-on-error: ${{ matrix.experimental }}
  #       uses: aurelien-baudet/workflow-dispatch@v2
  #       with:
  #         workflow: single_deploy.yml
  #         inputs: ${{ env.JSON_PAYLOAD }}
  #         repo: alekseyich/zmitrukevich-flow
  #         ref: main
  #         wait-for-completion: true
  #         display-workflow-run-url: true
  #         token: ${{ secrets.ACCESS_TOKEN_GITHUB }}
  #         wait-for-completion-interval: 30s

  #     - name: Informational step
  #       if: always()
  #       run: |
  #         echo "single_deploy.yml URL: ${{ steps.trigger-step.outputs.workflow-url }}"

  #     - name: Check triggered workflow status
  #       if: always()
  #       run: |
  #         if [ ${{ steps.trigger-step.outputs.workflow-conclusion }} != 'success' ] ; then
  #           echo "Triggered workflow failed"
  #           exit 1
  #         fi  
