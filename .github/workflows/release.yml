name: "Create release"

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Environment to deploy"
        required: true
        default: "dev"
        options:
          - dev
          - qa
          - uat
          - prf
          - prd
      azure_region:
        type: choice
        description: "Azure regions"
        required: false
        options:
          - westus3
          - eastus
      version:
        description: "version"
        required: true
   

run-name: "Release in env ${{ inputs.environment }} at ${{ inputs.azure_region }}"

jobs:
  RELEASE:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    
    # - name: Set tag
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #     if git tag | grep -q "^${{ inputs.version }}$"; then
    #       echo "::warning::Tag ${{ inputs.version }} exists."
    #     else
    #       git tag ${{ inputs.version }} || true
    #       git push origin ${{ inputs.version }} || true
    #     fi
        
    # - name: Get tags
    #   id: get_tags
    #   run: |
    #     git fetch --depth=1 origin +refs/tags/*:refs/tags/*  # Ensure all tags are fetched
    #     echo "CURRENT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
    #     echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)" >> $GITHUB_ENV

    - name: Print tags
      run: |
        echo "Current Tag: $CURRENT_TAG"
        echo "Previous Tag: $PREVIOUS_TAG"
        
    - name: Make release
      if: github.ref == 'refs/heads/main'
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        gh release create ${{ inputs.version }} \
            --title "Release v${{ inputs.version }}" \
            --generate-notes || true
        # if gh release view "${{ inputs.version }}" > /dev/null 2>&1; then
        #   echo "::warning::Release ${{ inputs.version }} exists."
        # else
        #   if ! git tag | grep -q "^${{ inputs.version }}$"; then
        #     git tag ${{ inputs.version }} || true
        #     git push origin ${{ inputs.version }} || true
        #   fi
        #   gh release create ${{ inputs.version }} \
        #     --title "Release v${{ inputs.version }}" \
        #     --generate-notes || true
        # fi    
        
    # - name: Get new contributors list
    #   id: contributors
    #   run: |
    #     git log $PREVIOUS_TAG..$CURRENT_TAG --format='%aN <%aE>' | sort -u > contributors.txt
    #     echo "::set-output name=list::$(<contributors.txt)"   

    # - name: Make release tag
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #       gh release create ${GITHUB_REF#refs/tags/} \
    #         --title "Release v${GITHUB_REF#refs/tags/}" || true

    # - name: Get Current Release Notes
    #   id: current_notes
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #     RELEASE_NOTES=$(gh release view $CURRENT_TAG -q '.body')
    #     echo "::set-output name=release_notes::$RELEASE_NOTES"
        
    # - name: Append New Contributor
    #   id: updated_notes
    #   run: |
    #     NEW_NOTES="${{ steps.current_notes.outputs.release_notes }}\nContributed by: ${{ github.contributors.outputs.list }}"
    #     echo "::set-output name=updated_release_notes::${NEW_NOTES}"    

    # - name: Make edit release and publish
    #   if: github.ref == 'refs/heads/main'
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #       echo "${{ steps.updated_notes.outputs.updated_release_notes }}" | \
    #       gh release edit $CURRENT_TAG \
    #         --notes-file - --draft=false || true
            
   

    # - name: Detect New Contributors
    #   id: new_contributors
    #   run: |
    #     PREV_RELEASE_TAG=$(git describe --tags --abbrev=0 HEAD^)  # Previous tag
    #     NEW_CONTRIBS=$(git log $PREV_RELEASE_TAG..HEAD --format='%aN <%ae>>' | sort -u)
    #     echo "New contributors: $NEW_CONTRIBS"
    #     echo "::set-output name=new_contributors::$NEW_CONTRIBS"
        
    # - name: Update release with new contributors
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #     LATEST_TAG=${{ inputs.version }}
    #     LATEST_TAG_NEW=$(git describe --tags `git rev-list --tags --max-count=1`)
    #     echo $LATEST_TAG
    #     echo $LATEST_TAG_NEW
    #     RELEASE_ID=$(gh release view $LATEST_TAG --json id --jq '.id')
    #     echo $RELEASE_ID
    #     NEW_NOTES="## New Contributors:\n${{ steps.new_contributors.outputs.new_contributors }}"
    #     gh release edit $LATEST_TAG --notes $NEW_NOTES --draft=false || true


    # - name: Set version env
      # Use a little bit of bash to extract the tag name from the GitHub ref
      # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    # - name: version
    #   id: version
    #   run: |
    #     tag=${{ inputs.version }}
    #     version=${tag#v}
    #     major=${version%%.*}
    #     echo "tag=${tag}" >> $GITHUB_OUTPUT
    #     echo "version=${version}" >> $GITHUB_OUTPUT
    #     echo "major=${major}" >> $GITHUB_OUTPUT

    # - name: Get Previous Contributors
    #   id: prev_contrib
    #   uses: actions/github-script@v4
    #   with:
    #     script: |
    #       const repo = { owner: context.repo.owner, repo: context.repo.repo };
    #       const contributors = await github.paginate('GET /repos/{owner}/{repo}/contributors', repo);
    #       core.setOutput('list', contributors.map(user => user.login));

    # - name: Draft Release
    #   uses: release-drafter/release-drafter@v5.15.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    # - name: Find New Contributors
    #   id: new_contrib
    #   uses: actions/github-script@v4
    #   env:
    #     PREV_CONTRIBUTORS: ${{ steps.prev_contrib.outputs.list }}
    #   with:
    #     script: |
    #       const commits = context.payload.commits;
    
    #       if (!commits) {
    #         console.log('No commit data available.');
    #         core.setOutput('list', '');
    #         return;
    #       }
      
    #       const usernameList = commits
    #         .map(commit => commit.author && commit.author.username)
    #         .filter(username => Boolean(username) && !process.env.PREV_CONTRIBUTORS.includes(username))
    #         .filter((v, i, a) => a.indexOf(v) === i); // Remove duplicates
  
    #       core.setOutput('list', usernameList.join('\n'));

    # - name: Update Release Notes
    #   # if: steps.new_contrib.outputs.list
    #   uses: actions/github-script@v4
    #   with:
    #     github-token: ${{ secrets.GH_TOKEN }}
    #     script: |
    #       const newContribStr = `## New Contributors:\n${steps.new_contrib.outputs.list}`;
    #       const release = await github.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag: 'latest' });
    #       github.repos.updateRelease({
    #         release_id: release.data.id,
    #         body: release.data.body + "\n\n" + newContribStr
    #       });     
