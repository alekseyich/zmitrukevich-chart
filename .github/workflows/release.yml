name: "Create release"

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Environment to deploy"
        required: true
        default: "dev"
        options:
          - dev
          - qa
          - uat
          - prf
          - prd
      azure_region:
        type: choice
        description: "Azure regions"
        required: false
        options:
          - westus3
          - eastus
      version:
        description: "version"
        required: true
   

run-name: "Release in env ${{ inputs.environment }} at ${{ inputs.azure_region }}"

jobs:
  RELEASE:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # - name: Prepare new version
    #   id: semverout
    #   uses: paulhatch/semantic-version@v5.4.0
    #   with:
    #     bump_each_commit: "false"
    #     debug: "${{ runner.debug == '1' }}"
    
    # - name: Set tag
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #     if git tag | grep -q "^${{ inputs.version }}$"; then
    #       echo "::warning::Tag ${{ inputs.version }} exists."
    #     else
    #       git tag ${{ inputs.version }} || true
    #       git push origin ${{ inputs.version }} || true
    #     fi

    # - name: Make release tag
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #       gh release create ${GITHUB_REF#refs/tags/} \
    #         --title "Release v${GITHUB_REF#refs/tags/}" || true

    # - name: Make release main
    #   if: github.ref == 'refs/heads/main'
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
    #   run: |
    #     if gh release view "${{ inputs.version }}" > /dev/null 2>&1; then
    #       echo "::warning::Release ${{ inputs.version }} exists."
    #     else
    #       if ! git tag | grep -q "^${{ inputs.version }}$"; then
    #         git tag ${{ inputs.version }} || true
    #         git push origin ${{ inputs.version }} || true
    #       fi
    #       # gh release create ${{ inputs.version }} \
    #       #   --title "Release v${{ inputs.version }}" || true
    #     fi
        
    # - name: Set version env
      # Use a little bit of bash to extract the tag name from the GitHub ref
      # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: version
      id: version
      run: |
        tag=${{ inputs.version }}
        version=${tag#v}
        major=${version%%.*}
        echo "tag=${tag}" >> $GITHUB_OUTPUT
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "major=${major}" >> $GITHUB_OUTPUT

    - name: Get Previous Contributors
      id: prev_contrib
      uses: actions/github-script@v4
      with:
        script: |
          const repo = { owner: context.repo.owner, repo: context.repo.repo };
          const contributors = await github.paginate('GET /repos/{owner}/{repo}/contributors', repo);
          core.setOutput('list', contributors.map(user => user.login));

    - name: Draft Release
      uses: release-drafter/release-drafter@v5.15.0
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Find New Contributors
      id: new_contrib
      uses: actions/github-script@v4
      env:
        PREV_CONTRIBUTORS: ${{ steps.prev_contrib.outputs.list }}
      with:
        script: |
          const newContributors = context.payload.commits
            .map(commit => commit.author.username)
            .filter(username => !process.env.PREV_CONTRIBUTORS.includes(username))
            .filter((v, i, a) => a.indexOf(v) === i); // Remove duplicates
          core.setOutput('list', newContributors.join('\n'));

    - name: Update Release Notes
      if: steps.new_contrib.outputs.list
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const newContribStr = `## New Contributors:\n${steps.new_contrib.outputs.list}`;
          const release = await github.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag: 'latest' });
          github.repos.updateRelease({
            release_id: release.data.id,
            body: release.data.body + "\n\n" + newContribStr
          });     
